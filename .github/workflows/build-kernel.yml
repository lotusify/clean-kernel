name: Build Kernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
      KERNEL_DEFCONFIG: "exynos7885-a10_defconfig"

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 100

    - name: Initialize submodules
      run: |
        git submodule update --init --recursive

    - name: Setup KernelSU-Next
      run: |
        # Remove existing KernelSU setup
        rm -rf KernelSU-Next
        rm -rf KernelSU
        rm -rf drivers/kernelsu
        # Install latest KernelSU-Next 1.0.9
        curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s v1.0.9
        # Verify installation
        ls -la drivers/kernelsu/
        ls -la drivers/kernelsu/Kconfig || echo "Kconfig not found"

    - name: Cache proton-clang
      uses: actions/cache@v3
      id: cache-proton
      with:
        path: proton-clang
        key: proton-clang-${{ runner.os }}-${{ hashFiles('**/build-kernel.yml') }}
        restore-keys: |
          proton-clang-${{ runner.os }}-

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt/archives
        key: apt-cache-${{ runner.os }}-${{ hashFiles('**/build-kernel.yml') }}
        restore-keys: |
          apt-cache-${{ runner.os }}-

    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2

    - name: Install dependencies
      run: |
        sudo apt-get update -y 
        sudo apt install -y \
          gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabi \
          binutils make python3 python2 libssl-dev build-essential \
          bc bison flex unzip ca-certificates xz-utils \
          mkbootimg cpio device-tree-compiler git git-lfs
        # Only download proton-clang if not cached
        if [ "${{ steps.cache-proton.outputs.cache-hit }}" != 'true' ]; then
          rm -rf proton-clang
          git clone https://github.com/kdrag0n/proton-clang --depth=1 -b master
        fi
        make clean
        make mrproper

    - name: Build Kernel
      run: |
        export PROTON_PATH=$(pwd)/proton-clang/bin
        export PATH=$PROTON_PATH:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export CC="ccache clang"
        # Use GNU ld instead of lld to avoid --lto-O3 issues
        export LD=aarch64-linux-gnu-ld
        export AR=llvm-ar
        export NM=llvm-nm
        export OBJDUMP=llvm-objdump
        export OBJCOPY=llvm-objcopy
        export STRIP=llvm-strip
        export KCFLAGS=-w
        export ANDROID_MAJOR_VERSION=r
        # Disable LTO flags to prevent linker errors
        export KBUILD_LDFLAGS=""

        make O=out $KERNEL_DEFCONFIG
        # Disable LTO and related options that cause linker issues
        scripts/config --file out/.config -d LTO -d LTO_CLANG -d CFI_CLANG
        # Enable A10 specific configs
        scripts/config --file out/.config -e ARCH_SUNXI -e MACH_SUN4I
        make O=out olddefconfig
        make O=out -j$(nproc --all)

    - name: Package kernel
      run: |
        git clone --depth=1 https://github.com/osm0sis/AnyKernel3 -b master AnyKernel3
        rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
        
        # Use custom anykernel.sh for Samsung Galaxy A10
        cp anykernel.sh AnyKernel3/anykernel.sh

        if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
        elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
          cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
        elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
          cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
        elif [[ -f out/arch/arm64/boot/Image ]]; then
          cp out/arch/arm64/boot/Image AnyKernel3/Image
        fi

        if [[ -f out/arch/arm64/boot/dtbo.img ]]; then
          cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
        fi

    - name: Upload kernel to artifact
      uses: actions/upload-artifact@v4
      with:
        name: CleanKernel-A10-${{ github.run_number }}
        path: AnyKernel3/
